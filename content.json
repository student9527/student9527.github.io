{"pages":[],"posts":[{"title":"FizzBuzz 問題","text":"給一個整數 n請列印出 1~n 的每一個整數，但是當整數可以被 3 整除的時候印出 Fizz 來代替原本要印出的數，當整數可以被 5 整除的時候印出 Buzz 來代替原本要印出的數，當整數可以被 3 跟 5 整除的時候印出 FizzBuzz 來代替原本原本要印出的數。 比如 n = 15 ，就要印出 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz js 基本解法 const n = 50;for(let i = 1; i","link":"/2020/03/22/FizzBuzz/"},{"title":"幫你擋住可怕的 facebook 動態牆黑洞！找回專注力","text":"在家遠端工作是不是常常會不小心滑到 facebook 去看動態訊息呢？ 這樣一直分心是會對生產力造成很大的影響的。 可以登出 facebook 解決這個問題，但是之後登入還要想密碼，感覺就很麻煩。 因此，除了登出以外，有沒有更好的方式呢？ 有的，這個外掛叫做 News Feed Eradicator 市佔率比較大的瀏覽器都有這個外掛 Chrome 版本 FireFox 版本 直接裝上去就可以用囉， 除了幫你擋住可怕的動態牆內容， 還有一些英語的名言可以學習呢！ 這樣就可以阻止你的滑鼠一直滑下去，浪費時間。 找回專注力與生產力！ 當然，當你真正想用 facebook 的時候，可以把這個外掛停用就好，Chrome 的設定話是在右上角的三個點 -> 更多工具 -> 擴充功能 大家可以參考看看～","link":"/2020/03/31/StopFBWall/"},{"title":"字串反轉(String Reverse)","text":"題目：把 ‘abcde’ 轉成 ‘edcba’。 非常常見的題目，算容易。 先來看看 Java 解法： public static void main(String[] args) { String question = \"abcde\"; String result = \"\"; for(int i = question.length(); i >= 1; i--) { result += question.charAt(i-1); } System.out.println(result); } Java 主要是用 charAt() 這個方法來找到字串的 index。然後迴圈從陣列長度開始，往下遞減。 再來看看 js 解法： const str = 'abcde';let result = '';for(let i = str.length; i>=1; i--){ result += str[i-1]}console.log('result is ' + result); js 因為可以直接用陣列的方式 str[i-1] 去取得字串的 index ，所以會比較簡短一點。 另外，js 還可以使用字串的內建函數 split, reverse, join 來做，更快速。 const str = 'abcde'const result = str.split('').reverse().join('')console.log(result); 這三個函數功能說明分別如下： const str = 'abcdef'// 先用 split 切割成陣列const strSplit = str.split('');console.log(strSplit);// output// [ 'a', 'b', 'c', 'd', 'e', 'f' ]// 反轉陣列const strReverse = strSplit.reverse()console.log(strReverse) // output//[ 'f', 'e', 'd', 'c', 'b', 'a' ]// 陣列轉回字串const strJoin = strReverse.join('');console.log(strJoin);// output// fedcba// 所以可以3個方法一起來const result = str.split('').reverse().join('')console.log(result);// output// fedcba 當然，還有很多方法，各有優缺點，也要看情況使用。","link":"/2020/03/26/StringReverse/"},{"title":"Map getOrDefault 方法","text":"用在沒有這個 key 時，所要給的預設 value。 Java原始碼 default V getOrDefault(Object key, V defaultValue) { V v; return (((v = get(key)) != null) || containsKey(key)) ? v : defaultValue; } 當 Map 集合中有這個 key 時， 就使用這個 key 的值，如果沒有，就使用 defaultValue 的值 範例說明：比如一個人名跟分數的 Map public class MapGetOrDefault { public static void main(String[] args) { Map map = new HashMap(); map.put(\"小華\", 90); map.put(\"小明\", 70); map.put(\"小安\", 80); Integer score = map.getOrDefault(\"小華\", 0); System.out.println(score); // 印出 90，因為 map 中存在小華, 可以印出90 Integer score2 = map.getOrDefault(\"阿奇\", 0); System.out.println(score2); // 印出 0，因為 map 中不存在 \"阿奇\",使用默認 0 }}","link":"/2020/03/27/Map-getOrDefault/"},{"title":"印出陣列中重複前 k 多的數(The Frequent K)","text":"題目： 給一個陣列，請印出陣列中重複次數最多的前 k 名。 例如：陣列：[7, 2, 8, 8, 15, 6, 7, 5, 5, 5, 5, 7] ex1:input: k = 2;印出出現前 2 多的數output: [5, 7] ex2:input: k = 3;印出出現前 3 多的數output: [5, 7, 8] 解法：(Java) public class TheFrenquentK { public List topKFrequent(int[] nums, int k) { if (nums == null || nums.length == 0 || k = k) break; result.addAll(box[i]); } return result; } public static void main(String[] args) { int[] numbers = { 7, 7, 2, 2, 2, 8, 4, 2, 5 }; int k = 2; TheFrenquentK ans = new TheFrenquentK(); System.out.println(\"Answer is \" + ans.topKFrequent(numbers, k)); }} 註解：getOrDefault用法說明","link":"/2020/03/29/TheFrequentK/"},{"title":"Docker 常用指令","text":"Docker 常用指令整理 docker ps 列出所有正在執行的 container docker ps --all 列出過去曾經新增的 container docker run = docker create + docker start docker start -a + container id 重新開啟過去開過的 container。 docker system prune 刪除下列：(通常會在docker使用後幾週，想要清除一些空間時用)。WARNING! This will remove: - all stopped containers - all networks not used by at least one container - all dangling images - all dangling build cache docker logs + container id 取得 logs ，不是重跑一次，比較省資源，通常在 debug 或設定時使用。 docker stop + container id 會等回應，10秒後若沒有回應會自動執行 docker kill. docker kill + container id 直接停止該 id 的 container。 Thanks a lot","link":"/2020/04/11/docker/"},{"title":"有關 Student9527 這個地方","text":"為什麼會有 Student 9527 ?HI ~ 大家 Student 9527 是一個小編個人在學習時所做的一個紀錄，以及分享。受到許多網路上、書上前輩的啟發，以及讀碩班時的想法。我知道有非常多類似的知識型網站，但是小編覺得很多網站的政治立場、觀念都非常偏頗，夾雜著許多似是而非的道理，個人覺得這並非知識型網站該有的樣子，因此想自己做一個看看，也讓我這名文組生練一下程式，畫 logo 練習用一下 photoshop ，嘿！一舉數得阿！！好加在網路上有許多大神 PO 了非常多的網頁建構教學，讓我覺得活在現代真是幸福啊（在軟體領域真的很多神人很佛心）。架設這個網站其實不難（但還是花了我不少時間XD），大多數是 Git 和 Node.js 的應用。本網站使用 npm 中的 Hexo 框架快速建構網誌，套用主題，然後做一些微調。那為什麼會叫 student 9527 ? 其實也沒甚麼，就是一個學習的網誌加上一些編號，不知為何我腦中第一個編號就是 9527 哈，可能周星馳的電影真的看太多了XD。因背景的關係，內容可能會比較偏向有趣的心理學、管理學，還有一些啟發小編的任何事情，有利學習、創作的都會盡量寫寫看，盡請期待！ 有關創作，人人需要！那為什麼要創作呢？小編發現到，華人社會對創作這件事情抱持非常消極的態度，華人許多家長發現孩童在唸國中前有藝術家氣息時，還會好好培養，但是到了國中以後，有了升學壓力，重心慢慢地偏向了考試，慢慢地放棄了那培育多時的才藝。甚至，當孩子到高中時若決定要往藝術之路發展時，大多數的華人家長是愁眉苦臉，叫孩子好好用功唸書，創作魂隨著長大逐漸消失。但是在台灣，不靠一些創意、創新，如何走出國際？不是說唸書不好，而是唸書之外應該也要注意到在自己的領域中，不管是學術、藝術、運動，都要檢驗自己是否具有創新能力去打造非凡的自我。創作當然不容易，除了別人會阻礙我們，也有很多時候都是自己再阻擋自己，覺得做出來的東西不完美，怕被別人笑，就不敢創作。還記得臉書創辦人 Mark Zuckerberg 在 2017 哈佛大學畢業典禮來賓致詞，他說做 facebook 以前還是有做很多失敗的 app 應用程式，但他就是一直去嘗試，很多東西不是一出來就是完美的，先做就對了，必須要先做，才知道後續怎麼做，才會接近完美。這跟我們學生時期學習過程是很不一樣的，每次考試都會完美地做好準備才敢上戰場，不然就知道自己完蛋了；要追女友要想好完美台詞，想好完美約會地點，等想好就被別人追走了XD。這習慣會養成一種完全準備好才敢出發的思維，破壞任何內心想進行創作的想法。我想，是該做出改變了，雖然這個網誌可能一開始不完美，比如編輯用的 Markdown 我還不太會，分類也還沒完全上線XD，logo 設計還要加強(可以給我建議)，但沒關係，先做就對了！做下去，創意自然湧現，相信創意之神帶領我們起飛！ 歡迎分享給朋友~","link":"/2018/08/14/first/"},{"title":"科學家教你考試/上場前10分鐘可以降低緊張的做法","text":"克服考試緊張的科學做法 科學家教你考試/上場前 10 分鐘可以降低緊張的做法考前/上場前緊張！ Photo by Ben Mullins on Unsplash 你是否明明考試準備得好好的，卻常常敗在緊張？或是要明明準備好上台報告，一上台腦子裡卻一片空白？其實有很多人是這樣子的。除了上場前熟練到不行練到像喝水以外，有沒有什麼方法是在上場前能降低緊張，進而增加表現呢？ 有的，這個方法非常簡單：抒發寫作：上場前 10 分鐘把你的緊張、擔心寫在紙上。就這麼簡單？ 沒錯，就是那麼簡單，科學家如何想出以及應證這個方法呢？ 一、抒發寫作的效果（Expressive writing）在一份臨床心理學實驗研究中(Smyth，1998)，沮喪、意志消沉的人把自己情緒緊張的想法寫在紙上，累積經過幾個禮拜或幾個月後，可以達到減輕消沉的情況。但這無法解決要上場的燃眉之急。在另一方面，科學家認為人們可以透過「書寫」來重新評估擔心的必要性，進而減輕工作記憶（Working memory）對擔心事物的負擔。因此，科學家 Ramirez 和 Beilock(2011)認為，在巨大考試壓力下，若給學生機會去抒發寫作，有可能會增加其表現。 二、實驗因此科學家 Ramirez 和 Beilock 在高壓力測驗把學生分成兩組，分別為抒發寫作組，與一般組，在高壓力情況下前 10 分鐘讓抒發寫作組進行抒發寫作，結果發現，有進行抒發寫作的同學得到比較高的分數。但 Ramirez 和 Beilock 又進行了下一步的驗證，在考試前是「書寫」本身就能減低壓力並提昇表現呢？還是書寫的內容有關考試擔憂時才會有這個效果？於是科學家把學生分成抒發寫作組與其他寫作組，結果發現「書寫」本身並沒有辦法在考試前減輕考試壓力，而要進行與考試壓力相關的抒發寫作，才會降低其考試壓力且得到較高的分數。 三、結論與建議上述實驗告訴我們抒發寫作可以有在考前較低考試壓力，且讓學生表現較佳的效果。而小編認為，不只在高壓力考試中可以運用抒發寫作，在其他需要上場前壓力大或焦慮的時後，也可以適時運用抒發寫作來減輕自己大腦對壓力的負擔，進而增加上場表現唷。下次緊張的時候，趕緊試試吧！！ 資料來源與註釋工作記憶（Working memory）：工作記憶是一種短期記憶，涉及控制和調節與現有任務的有限訊息記憶容量。Ramirez, G., & Beilock, S. L. (2011). Writing about testing worries boosts exam performance in the classroom. science, 331(6014), 211-213.Smyth, J. M. (1998). Written emotional expression: effect sizes, outcome types, and moderating variables. Journal of consulting and clinical psychology, 66(1), 174.","link":"/2018/09/28/expressWriting/"},{"title":"當教育變成商品，一些你沒想到的事","text":"教育已經不單純還記得教育應該有的樣子嗎？教育應該是符合學生的興趣、志向而老師們想辦法幫助學生激發其潛能。沒錯，30年前確實是這樣，每個學生都可以找到自己喜歡的技能，發展一技之長，所有的東西在學校裡都有了，只要付一些學費，其他的國家都幫你出，學生的未來充滿希望。 現在呢？大家把教育視為商品，老師變成服務業，學生變成消費者，多麼無情冷酷的商業用語阿。教育應該是充滿溫暖，充滿希望的地方啊！大學學費越來越貴，勞工基本薪資幾乎沒變；社會充滿著沒讀大學的話，人生註定失敗的風氣；一些想要發展技能的學生硬上大學，出來工作才發現這不是自己想要的，這十幾年的青春，誰賠給你？繳得起大學學費的還好，繳不起的怎麼辦？高等教育好像變成一個名牌，有錢才能買到，那貧窮的學生怎麼辦？讀完四年大學就背學貸，好讓銀行利息賺飽飽，學生苦哈哈？教育的公平性在哪裡？在這個注重人權的社會，每個人不是應該都要有一樣的教育資源嗎？ 教育商品化公平嗎？教育變成了政府幫忙資本家訓練勞工的地方，在台灣需要高科技人才是吧？政府就給科技業非常豐厚的資金，其他科系學生的夢想呢？這個國家不需要優秀的畫家、作家、設計師、廚師？為什麼這些領域的資金這麼少，而大家卻繳一樣的學費？這實在是太荒謬了(好險台灣還好，在美國，換算成台幣，大學一學期要繳上百萬)。 當教育變成商品，那應該在購買前要有這個領域未來的薪資說明才對吧？買菸都會告訴你未來的風險了，繳學費也應該要說明就算你有這個學歷，也是可能找不到工作。這個資訊不透明，帶給很多人在財務上的困難。更別說補習班了，有哪個補習班會跟你說你沒考上某某大學會退你學費？ 我們可以自救？好在目前科技進步，很多學習內容在網路上都有免費的，或者是一些網路教學網站只要幾百元(台幣)就可以學習到完整知識 (小心！補習班會跟你說不可能)，這在歐洲、美國、中國大陸都非常盛行，因為市場大，收個幾百元，人多也是賺的，台灣這邊就比較困難了，線上學習基本上還是會比較貴 (大概幾千塊)，但跟補習班來比便宜很多了，或者把英語學好到美國網站學習相關技能也可以，不過就是比較花時間 (中國大陸網站小編沒試過)。 我們在如此科技進步的時代真的很幸運，雖然有名大學的名牌現象還是無法解除，但有許多教育家正在透過網路教學平台推行平民教育，這是很樂見的，讓知識不再屬於要繳一大堆錢才可學習到，這是我們生在這個時代的萬幸吧！多學習如何用 Google 找到資料也是必須的能力呢！值得好好培養！","link":"/2018/08/24/eduProduct/"},{"title":"陣列最小值","text":"如何印出陣列最小值？ Java 寫法public static void main(String[] args) { int[] ary = new int[] { 25, 66, 7, 53, 14, 34, 5, 46 }; int min = ary[0]; for (int num : ary) { // System.out.println(num); if (num < min) { min = num; } } // 最小值 System.out.println(\"min is \" + min); // 第二種 Loop for(int i = 0; i < ary.length -1; i++) { if(ary[i] < min) { min = ary[i]; } } // 最小值 System.out.println(\"min is \" + min); } // output // min is 5 // min is 5 js 寫法const ary = [25, 66, 7, 53, 14, 34, 5, 46]let min = ary[0]for(let i = 0; i","link":"/2020/03/22/arrayMin/"},{"title":"台北車站大廳","text":"常常約朋友在台北車站大廳嗎？ 首先找到很長的上樓手扶梯 上去後，左轉兩次，會看到一段小樓梯，直走 然後右轉到長走廊， 在長走廊上注意左邊， 有看到電扶梯就可以上去囉！","link":"/2019/03/19/goToHall/"},{"title":"鋼鐵人主持新 YouTube 節目！探討 AI 議題","text":"想念鋼鐵人的大家，快點來看看小勞勃道尼的新節目 小勞勃道尼在 YouTube 官方頻道主持科技節目這實在是太帥啦！鋼鐵人從電影走到真實世界，跟你聊聊科技的各種主題，快點來看看吧。 看小勞勃道尼如何用他幽默的調調介紹新科技影片如下：","link":"/2019/12/21/ironmanHostAI/"},{"title":"mongoose 基本設定","text":"Add Mongoose Install and configure Mongoose Setup campground model Use campground model inside of our routes 注意：以下為 cluod9 環境下操作先到 v2 資料夾，安裝好mongoose npm install mongoose --save 檢查 package.json 有無安裝好 Mongoose接下來 在終端機 c9 最原本處執行 MongoDB ./mongod 在 app.js 內最上加入 mongoose 因此會有 var express = require('express'), app = express(), bodyParser = require('bodyparser'), mongoose = require('mongoose') 然後在終端機執行 node app.js 來測試看看有沒有問題 沒問題後，在 app.js 內連結 mongoose mongoose.connect(\"mongodb://localhost/yelp_camp\"); 因此會有下列設定 mongoose.connect(\"mongodb://localhost/yelp_camp\");app.use(bodyParser.urlencoded({extended: true}));app.set(\"view engine\", \"ejs\"); 接著測試看看 app.js ，可以之後來設定 Schema // Schema Setupvar campgroundSchema = new mongoose.Schema({ name: String, image: String});var Campground = mongoose.model(\"Campground\", campgroundSchema); 設定好 Schema 後，測試看看是否能增加資料來使用，增加 Campground.create({ name: \"Salmon Creek\" image: \"(url)\"}, function(err, campground){ if(err){ console.log(err); } else { console.log(\"Newly Created Campground: \"); console.log(campground); }}); 終端機啟用 node app.js 試試有沒有成功。 也在終端機輸入 mongo 然後 show dbs 試試看有沒有 yelp_camp 資料出現 也可 use yelp_camp 看看 再用 show collections 看看資料 再用 db.campgrounds.find() 看看剛剛輸入的資料 Ctrl + C 關閉 mongo 伺服器繼續編輯 現在刪除剛剛測試的資料 name: \"Salmon Creek\" image: \"(url)\"}, 修改連結 /campground 的地方 app.get(\"/campgrounds\", function(req, res){ // Get all campgrounds from DB Campground.find({}, function(err, allCampgrounds){ if(err){ console.log(err); } else { res.render(\"campgrounds\",{campgrounds:allCampgrounds}); } });}) comment 之前測試能否使用 mongoose 的測試資料 // Campground.create({// name: \"Salmon Creek\"// image: \"(url)\"// }, function(err, campground){// if(err){// console.log(err);// } else {// console.log(\"Newly Created Campground: \");// console.log(campground);// }// }); 然後使用終端機 node app.js 來看看是否成功！ 成功後來解決一項問題，在前端介面輸入圖片url的時候若不輸入圖片，會有 campgrounds is not definded的情況 問題在 app.post 部分的程式碼 campground.push(newCampground) 這邊是之前測試時推上剛剛 comment 掉的地方，於是我們要刪除這行，並修改成增加一段 Campground 且存到 DB 的程式碼，若不是則要跳到 campgrounds 頁面 // Create a new campground and save to DBCampground.create(newCampground, function(err, newlyCreated){ if(err){ console.log(err); } else{ // redirect back to campgrounds page res.redirect(\"/campgrounds\"); }}) 這樣就完成啦！！","link":"/2018/12/23/mongoose/"},{"title":"有好的想法但遲遲未行動？該與「他」來場對話了。","text":"常常想做一些讓自己成長的事但都懶得行動嗎？該見見他了，誰呢？ Sorce: Benjamin Davies on Unsplash 未來的自己為什麼與未來的自己對話能鼓勵自我展開行動呢？我們先來一趟心理學實驗之旅。這邊有兩項實驗，都是由 Hershfield 等學者在 UCLA Anderson School of Management 做的，他為了想知道我們對未來的自己想法是怎麼樣的，於是做了以下實驗： 實驗一：未來的自己與 fMRI他讓學生躺在功能性磁振造影機（fMRI，一種能測量出大腦內活動的機器）裡面想像著未來的自己，然再想像另外的人（比如：蔡依林），實驗結果發現，學生再想像這兩個的時候，大腦掃描圖竟然沒甚麼差別！ 這會影響甚麼呢? 這表示我們會把未來的自己當成陌生人，當我們拖延某件事，我們並沒有想到以後的你要來處理這件事，認為那是別人的事啊。但事實上呢? 是我們的事啊，既然你把為未來的自己當作陌生人，把努力這種累人的事情託給他，對現在當然是比較輕鬆的，但我們沒想到以後的那個人，其實還是自己啊。你可能遇過以下情形：我們把可以準備一個月的考試，丟給剩下一個禮拜的自己，讓最後一個禮拜的自己累得要死；我們把想要學的東西不斷地拖延給未來，直到現在還沒動手；把減肥計畫託付給未來的自己，阿~明天再減肥吧，想當然無法成功。所以，請別忘記，未來的自己不會比較輕鬆，好好的計劃每天該努力的進度吧！ 實驗二：分配給未來的自己Hershfield 也設計了一台模擬機器，用 3D 虛擬影像創造出受測者（學生）退休之後的模樣。 Hershfield 讓一些學生進去模擬器之後，他給了學生們一道任務：將一千美金分配給現在的自己與退休後的自己。實驗結果發現，有進去模擬機的學生比沒有進去模擬機器的學生分配給未來的自己多了一倍。也就是說，看過自己退休後的模樣的學生，分配了較多的錢給自己。這項實驗說明了，光是看過未來的自己，就會對未來的自己著想，幫幫幾十年後的自己。 其實，我們可以透過這兩項實驗，知道現在的自己低估了未來的壓力，也對未來的自己比較刻薄，所以若我們平常就跟未來的自己對話呢?像是： 情況 1 :現在我: 嘿！兄弟 ~ 10年後的我過的怎麼樣阿 未來我: 唉，別說了，以前你不好好努力，都在花時間娛樂，沒學甚麼技能，薪水又低，好累阿>","link":"/2018/08/15/futureme/"}],"tags":[{"name":"Express writing","slug":"Express-writing","link":"/tags/Express-writing/"},{"name":"education problems","slug":"education-problems","link":"/tags/education-problems/"}],"categories":[{"name":"code","slug":"code","link":"/categories/code/"},{"name":"artist","slug":"artist","link":"/categories/artist/"},{"name":"learning","slug":"learning","link":"/categories/learning/"},{"name":"view","slug":"view","link":"/categories/view/"}]}